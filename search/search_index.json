{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TrySpace Atlas","text":"<p>This atlas is your comprehensive guide to understanding and working with TrySpace Lab.</p> <p></p>"},{"location":"#contents","title":"Contents","text":"<ul> <li>About: Background and purpose of TrySpace.</li> <li>Lab Manual: Guide to installing, configuring, and understanding TrySpace Lab.</li> <li>Design Reference Mission: Formal specification and \"paperwork\" for the example mission.</li> <li>Scenarios: Step-by-step walkthroughs of practical mission operations.</li> <li>Contact: Let's build something together!</li> </ul>"},{"location":"#first-steps","title":"First Steps","text":"<p>To begin, explore the sections above or use the search functionality to find specific topics. If you have questions or need help, feel free to start a GitHub Discussion. For bug reports or feature requests, please open a GitHub Issue. We welcome contributions from everyone.</p> <p>We're happy to help you TrySpace!</p>"},{"location":"about/","title":"About TrySpace","text":"<p>TrySpace is a space software and systems design company founded to accelerate space mission development through open-source tools, software digital twins, and a mission-first approach.</p>"},{"location":"about/#mission-philosophy","title":"Mission &amp; Philosophy","text":"<p>To democratize access to high-quality space system development tools through pragmatic, open-source, software-first infrastructure that scales from CubeSats to interplanetary missions.</p>"},{"location":"about/#founder-background","title":"Founder Background","text":"<p>TrySpace was founded by a NASA software developer with over a decade of experience in embedded systems, flight software, and simulation infrastructure.</p> <p></p> <p>Key open-source contributions include CryptoLib and the NASA Operational Simulator for Small Satellites (NOS3). These tools have and continue to be leveraged on NASA missions for rapid prototyping, testing, and operations.</p>"},{"location":"about/#what-we-do","title":"What We Do","text":"<ul> <li>Custom tools for flight and ground systems</li> <li>End-to-end mission simulation and architecture</li> <li>Integration and support for open-source space software</li> <li>Software-only digital twins for space systems</li> <li>Technical consulting</li> </ul>"},{"location":"about/#why-tryspace","title":"Why TrySpace?","text":"<p>Building for space is hard. We provide the software solutions that make it easier to try, test, and fly. TrySpace lowers the barriers to entry, increases reuse, and enables your mission to launch smarter.</p>"},{"location":"contact/","title":"Contact","text":"<p>We'd love to hear from you. If you have questions or need help, feel free to start a GitHub Discussion. For bug reports or feature requests, please open a GitHub Issue. Whether you\u2019re starting a new mission, looking for support with an existing one, or just want to connect \u2014 get in touch.</p> <ul> <li>Email: John.P.Lucas@tryspace.org</li> <li>GitHub: https://github.com/TrySpaceOrg</li> <li>Location: Morgantown, WV</li> </ul> <p>Please include a short description of your project, timeframe, and what support you need when you reach out.</p>"},{"location":"drm/ait-plan/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"drm/concept-of-operations/","title":"DRM Concept of Operations","text":""},{"location":"drm/concept-of-operations/#system-overview","title":"System Overview","text":"<p>The Design Reference Mission (DRM) is a small, modular spacecraft model implemented and exercised inside the TrySpace Lab environment to teach, prototype, and validate flight operations and flight software concepts.</p> <p>Key system components and their roles:</p> <ul> <li>cFS (Core Flight System): provides the onboard application framework, message bus, telemetry/command handling, event reporting (EVS), and standard apps used throughout the scenarios (ADCS, CFDP, DS, EVS, FM, etc.).</li> <li>Ground software (YAMCS): receives telemetry, displays spacecraft state, and provides command interfaces and scripted sequences (RTS) used during commissioning and nominal ops.</li> <li>Simulated hardware stacks: software models of ADCS, radios, payloads, and storage that behave like their flight counterparts within the constraints of TrySpace Lab.</li> <li>TrySpace Lab environment: provides a realistic ground-side operations environment built from containers and services (YAMCS for telemetry visualization and commanding, simulated radios, file servers, and the scenario stacks).</li> </ul> <p>The DRM package in this atlas includes command sequences, scenario definitions, and documentation intended to exercise the interactions between these components during mission phases.</p> <p>Mission subsystems:</p> <ul> <li> <p>Attitude Determination and Control System (ADCS):</p> <ul> <li>Purpose: Provides attitude sensing and control to point the vehicle (or payload) for mission objectives such as sun\u2011pointing, nadir observations, or stable inertial pointing.</li> <li>Key interfaces: publishes attitude/quaternion telemetry, wheel rates, sun sensor readings and accepts mode, setpoint, and torque wheel/commanding messages via cFS topics.</li> <li>Typical commands: mode changes (SUNSAFE, DETUMBLE, TRACK), attitude setpoints, calibration and sensor resets.</li> <li>Failure modes &amp; mitigations: loss of fine pointing (fall back to SUNSAFE), stuck wheel (command wheel desaturation or stop), sensor dropouts (switch to coarse sensors or safe mode).</li> </ul> </li> <li> <p>CryptoLib:</p> <ul> <li>Purpose: Provides mission cryptographic primitives for secure storage, authentication, and encrypted telecommand/telemetry when enabled by the mission profile.</li> <li>Key interfaces: offers crypto services to other cFS apps (sign/verify, encrypt/decrypt, key management hooks) and may log audit events to EVS/DS.</li> <li>Typical commands: key provisioning (simulated), enable/disable crypto services, perform self-tests.</li> <li>Failure modes &amp; mitigations: key corruption or service failure (fail closed or open per mission policy); in the lab, operators may bypass or reset the crypto service if needed for recovery.</li> </ul> </li> <li> <p>Demonstration Instrument:</p> <ul> <li>Purpose: A representative payload used to exercise data collection, on\u2011board storage, and retrieval workflows (e.g., generate files that are managed by FM/DS and transferred via CFDP).</li> <li>Key interfaces: configuration commands (integration time, gain, mode), science telemetry, and file output into the on\u2011board file system.</li> <li>Typical commands: initialize/enable instrument, configure measurement parameters, start/stop acquisitions, and request data product generation.</li> <li>Failure modes &amp; mitigations: stuck acquisition (reset instrument app), overflow of on\u2011board buffers (request immediate downlink or clear files), corrupted files (re-run acquisition or mark for discard).</li> </ul> </li> <li> <p>Electrical Power System (EPS):</p> <ul> <li>Purpose: Manages generation (simulated solar arrays), storage (batteries), power distribution, and thermal constraints required to operate the spacecraft.</li> <li>Key interfaces: publishes bus voltages, battery state of charge, solar panel outputs, load states, and accepts power mode and load shed commands.</li> <li>Typical commands: change power modes, enable/disable loads, perform battery/state-of-charge resets, and run power health tests.</li> <li>Failure modes &amp; mitigations: low bus voltage (shed non\u2011essential loads, enter safe mode), battery overtemp (reduce charging), simulated panel degradation (update mission ops plan to reduce power budget).</li> </ul> </li> <li> <p>Radio:</p> <ul> <li>Purpose: Simulates the space\u2011to\u2011ground and ground\u2011to\u2011space communication link including pass scheduling, duplex/half\u2011duplex modes, and point\u2011to\u2011point data transfers.</li> <li>Key interfaces: radio state and mode telemetry, scheduler hooks for RTS start/stop, and command interfaces for mode/config changes used by the ground (YAMCS/UI).</li> <li>Typical commands: configure radio mode (DUPLEX/RECEIVE/TRANSMIT), start/stop simulated passes (RTS), and set link parameters (data rate, modulation in advanced scenarios).</li> <li>Failure modes &amp; mitigations: link outage (retry on next pass or extend pass with RTS), packet loss (retransmit via CFDP), and misconfiguration (reset radio or re\u2011issue pass sequence).</li> </ul> </li> </ul>"},{"location":"drm/concept-of-operations/#mission-phases","title":"Mission Phases","text":"<ol> <li> <p>Launch &amp; Deployment</p> </li> <li> <p>Immediately after separation the vehicle is placed into a conservative, power\u2011saving \"safe mode.\" </p> </li> <li>No component subsystems are enabled and the spacecraft is tumbling.</li> <li>The data storage (DS) application is logging all event messages and telemetry produced to file.</li> <li>The limit checker (LC) and stored command (SC) applications perform any fault detection and correction.</li> <li>The basic initialization is done in cFS via the startup relative time sequence (RTS) number 1.</li> <li> <p>The spacecraft awaits ground contact for commissioning.</p> </li> <li> <p>Commissioning</p> </li> <li> <p>Establish first contact from the ground by sending the Start RTS 6 (Start Pass) command.</p> </li> <li>Verify command/telemetry link and basic responsiveness with a NOOP command and other health checks.</li> <li>Bring core subsystems online (ADCS, power management, payload) following verified checklists.</li> <li>Perform basic functional tests (file listings via FM, file transfers via CFDP, storage management via DS).</li> <li> <p>Perform any anomaly investigations as necessary.</p> </li> <li> <p>Nominal Operations</p> </li> <li> <p>Regular science/payload activities, attitude maintenance, periodic housekeeping, and scheduled data downlinks.</p> </li> <li>Modifications to limits and configuration settings as requested by subsystems after review.</li> <li> <p>Routine use of RTS on-board the vehicle and YAMCS procedure stacks to automate passes.</p> </li> <li> <p>Contingency and Anomaly Response</p> </li> <li> <p>Detection via EVS/event messages and telemetry limits.</p> </li> <li>Fault isolation using cFS app diagnostics, log review, and replayed telemetry in TrySpace Lab.</li> <li> <p>Recovery actions: safe mode recovery procedures, selective subsystem restarts, and uplinked software patches where applicable.</p> </li> <li> <p>Decommissioning / End of Life</p> </li> <li> <p>Final data retrieval, graceful shutdown of mission services, and transition to a passive or disposal state according to mission rules.</p> </li> </ol>"},{"location":"drm/concept-of-operations/#a-day-in-the-life-nominal-operations","title":"A Day in the Life (Nominal Operations)","text":"<p>A typical operations day for the DRM in TrySpace Lab focuses on monitoring, scheduled commanding, and data handling. Depending on the current data rates one or more passes per day are expected, assuming the ground station is available for scheduling. Assuming one pass the following is to be performed:</p> <ul> <li>Confirm current state of health, begin anomaly investigation if off-nominal.</li> <li>Perform any uploads or configuration changes.</li> <li>Delete any files that the data pipeline confirmed successful receipt of.</li> <li>Get the latest data file set from on-board the vehicle.</li> <li>Download data files until the end of the pass.</li> <li>Once pass is complete confirm data pipeline is has begun processing.</li> </ul> <p>It is typical for data to be backlogged on the vehicle. Data may be requested to be skipped based on external phenomenon.</p>"},{"location":"drm/concept-of-operations/#operational-constraints-and-simulation-fidelity","title":"Operational Constraints and Simulation Fidelity","text":"<p>The TrySpace Lab DRM scenario provides high fidelity in command/telemetry flows and flight software behavior, but the operator should be aware of limitations:</p> <ul> <li>Timing and pass windows are simulated. Real orbital dynamics are being calculated and used by the simulators, but are not leveraged for pass durations.</li> <li>Hardware effects and failures are modeled at a software level; some low-level hardware dynamics (thermal gradients, fine star\u2011tracker jitter, radiation effects) are either simplified or omitted depending on the scenario.</li> <li>Resource contention and container-level resource caps (CPU, memory) are host-dependent and may affect simulated timing when running on limited machines.</li> <li>Network latency and Docker host performance can change CFDP transfer characteristics compared to in-flight performance.</li> </ul> <p>Recommended operator practices to mitigate these constraints:</p> <ul> <li>Use the scenario stacks and stepwise execution controls in YAMCS to reproduce timing-sensitive steps deterministically.</li> <li>When validating fault responses, explicitly inject failures through the scenario controls rather than relying on emergent, hard-to-reproduce conditions.</li> <li>Monitor host resources (docker stats) while running heavy scenarios and consider increasing container resources for high\u2011fidelity testing.</li> </ul>"},{"location":"drm/concept-of-operations/#roles-and-responsibilities","title":"Roles and Responsibilities","text":"<p>This section clarifies who does what in the TrySpace Lab + DRM workflow.</p> <ul> <li>Flight Controllers (Mission Operator)</li> <li>Primary responsibility for commanding and monitoring the DRM during commissioning and nominal operations.</li> <li> <p>Executes RTS sequences, performs health checks, and coordinates data downlinks.</p> </li> <li> <p>Subsystem Leads (ADCS, Payload, Radio)</p> </li> <li> <p>Expert for a specific subsystem. Runs detailed checkouts, interprets subsystem telemetry, and advises the Flight Controller on configuration changes.</p> </li> <li> <p>Simulation Engineer / Lab Maintainer</p> </li> <li>Maintains the TrySpace Lab scenario stacks, container images, and scenario scripts used by the DRM.</li> <li> <p>Ensures YAMCS, CFDP, and the simulated hardware stacks are up-to-date and reproducible.</p> </li> <li> <p>Software Engineer (cFS &amp; Apps)</p> </li> <li>Develops and maintains cFS applications and ensures their integration with the simulation environment.</li> <li>Produces and validates command/telemetry definitions and app-level test cases used in the lab.</li> </ul>"},{"location":"drm/concept-of-operations/#success-criteria-and-acceptance-tests","title":"Success Criteria and Acceptance Tests","text":"<p>To consider a mission phase or daily operations successful in the DRM context, the following acceptance criteria are used:</p> <ul> <li>Commissioning: Ground successfully executes the Start Pass RTS, issues a NOOP, and observes incremented command counters and expected EVS messages.</li> <li>Subsystem Checkout: ADCS and demo instrument initialize, accept configuration commands, and report expected telemetry values for the configured modes.</li> <li>Data Handling: Files listed by FM are retrievable via CFDP and stored locally on the ground; DS successfully closes file sets for downlink.</li> </ul>"},{"location":"drm/concept-of-operations/#notes-and-next-steps","title":"Notes and Next Steps","text":"<p>See the commissioning scenario (<code>atlas/docs/scenarios/commissioning.md</code>) for a step\u2011by\u2011step walkthrough that implements the checks and sequences summarized here.</p> <p>Last updated: 20250910</p>"},{"location":"drm/interface-control-document/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"drm/mission-requirements/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"drm/operations-plan/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/core-concepts/architecture/","title":"System Architecture","text":"<p>The TrySpace Lab is designed as a high-fidelity \"digital twin\" of a complete spacecraft mission. It is not just one piece of software, but an integrated ecosystem of multiple open-source components working together to replicate the relationship between a spacecraft, its environment, and mission control.</p> <p>The core philosophy is realism and modularity. We use actual flight software (cFS) and ground control software (YAMCS) connected through a realistic simulation environment. This allows you to develop, test, and \"fly\" your mission in a software-only environment that closely mirrors the real world.</p>"},{"location":"manual/core-concepts/architecture/#high-level-architecture","title":"High-level Architecture","text":"<p>In TrySpace Lab you'll note five containers running in docker prefaced with <code>tryspace-</code>:</p> <ul> <li>CryptoLib: Utilized to provide command authenticated encryption to the uplinked data.</li> <li>Director: Runs the 42 dynamics and component simulators.</li> <li>FSW: cFS with a standard application suite and TrySpace specific component applications.</li> <li>GSW: YAMCS with database support for cFS and TrySpace specific applications.</li> <li>Server: Drives and synchronizes time between Director and FSW so they are in lock step.</li> </ul> <pre><code>graph TD\n    A[CryptoLib] --&gt; B\n    B --&gt; A\n    subgraph B[Director]\n        42\n        Sims\n    end\n    C[FSW] &lt;--&gt; B[Director]\n    C &lt;--&gt; D\n    D[GSW] &lt;--&gt; A\n    E[Server] &lt;--&gt; B\n    E &lt;--&gt; C</code></pre>"},{"location":"manual/core-concepts/architecture/#communications","title":"Communications","text":"<p>CryptoLib is running internal to the space vehicle as a library to the radio component in addition to running in the ground pipeline as its own container. Remember that in an actual scenario involving the space link there would be a translation to radio frequency (RF) at the radio and ground station which has been omitted.</p> <pre><code>graph LR\n    C[FSW] &lt;--&gt; |DEBUG| D\n    C &lt;--&gt; A[CryptoLib] &lt;--&gt; |RADIO| B[Director] &lt;--&gt; D[GSW]</code></pre> <p>Network transports of both UDP and IPC are used in TrySpace Lab: <pre><code>graph LR\n    C[FSW] &lt;--&gt; |IPC| B\n    A[CryptoLib] --&gt; |UDP:12346| D\n    B[Director] --&gt; |UDP:12344| A\n    A --&gt; |UDP:12343| B\n    D[GSW] --&gt; |UDP:12345| A\n    E[Server] &lt;--&gt; |IPC| C\n    E &lt;--&gt; |IPC| B</code></pre></p> <p>Additionally specific data formats are used at various points. The Consultative Committed for Space Data Systems (CCSDS) captures a number of the standard leveraged for space communications. Each layer encapsulates or augments the prior:</p> <ul> <li>Space Packets or CCSDS packets are they are sometimes referred to are the base.</li> <li>Telecommand or TCs contain a number of command space packets that would go to the space vehicle.</li> <li>Telemetry or TMs contain a number of telemetry space packets.</li> <li>Space Data Link Security (SDLS) and its extended procedures (SDLS-EP) augment these to enable authenticated encryption.</li> <li>CryptoLib standalone handles the TC framing from the GSW while the cFS IO_Lib called within the radio application interprets those frames and provides space packets that are placed on the software bus.</li> </ul> <pre><code>graph TD\n    B[Director] --&gt; |Space Packet Telemetry| A\n    A[CryptoLib] --&gt; |TC Frame| B\n    C[FSW] &lt;--&gt; |HWLIB| B\n    C &lt;--&gt; |Space Packets| D\n    D[GSW] --&gt; |Space Packet Commands| A\n    E[Server] &lt;--&gt; |Simulith| B\n    E &lt;--&gt; |Simulith| C</code></pre> <p>It should be noted that the cFS Hardware Library (HWLIB) is leveraging Simulith transport, ZMQ under the hood, to communicate in the TrySpace environment. HWLIB enables swapping of drivers between simulation and flight to ease the transition to the physical space vehicle.</p>"},{"location":"manual/core-concepts/architecture/#time-synchronization","title":"Time Synchronization","text":"<p>It was alluded to in the previous section that Simulith is driving time synronization. Simulith requires a number of connections to expect passed as an argument to it. In the TrySpace Lab environment this is always two as the FSW and Director are constants. This is possible because each of these distribute the received time tic to the various processes running within them.</p> <pre><code>graph LR\n    A[CryptoLib]\n    subgraph B[Director]\n        42\n        Sims\n    end\n    B[Director] &lt;--&gt; E\n    C[FSW] &lt;--&gt; E\n    D[GSW]\n    E[Server]</code></pre> <p>Last updated: 20250910</p>"},{"location":"manual/core-concepts/development-workflow/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/core-concepts/flight-software/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/core-concepts/ground-software/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/core-concepts/simulations/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/core-concepts/space-systems/","title":"Space System Crash Course","text":"<p>Think of a spacecraft as a highly autonomous robot living in the harshest environment imaginable. It has to generate its own power, think for itself, control its body temperature, and talk to its creators millions of miles away, all while performing a complex job.</p> <p>Flight software is the \"nervous system\" that makes this all possible.  To write good flight software, you first need to understand the \"body\" it controls. This page introduces the fundamental building blocks\u2014the subsystems\u2014that make up a typical space system.</p>"},{"location":"manual/core-concepts/space-systems/#space-and-ground-segments","title":"Space and Ground Segments","text":"<p>This section explains how the space link connects the spacecraft and ground segments. The spacecraft segment may be one or more space vehicles or relays. The ground segment may include a mission operations center (MOC), science operations center (SOC), and ground station. Pieces of the space segment leverage radio frequency (RF) or optical communication where the ground segment typically uses terrestrial networks.</p> <pre><code>graph LR\n    subgraph Ground Segment\n        A[SOC] &lt;--&gt; B[MOC]\n        B &lt;--&gt; C[Ground Station]\n    end\n    subgraph Space Segment\n        C &lt;--&gt; |Space Link| D[Spacecraft]\n    end</code></pre> <p>The space link connects the ground and space segments:</p> <ul> <li>Physical: antenna, RF front-end, modem/packetizer on the spacecraft and on the ground station. <ul> <li>In TrySpace Lab the radio is simulated but the logical behavior is the same, some transformations are simply treated as a bent pipe as they would occur on one side then be undone on the other.</li> </ul> </li> <li>Protocols: telemetry is sent in frames/packets (often CCSDS framing). <ul> <li>Files are transferred using CFDP which handles segmentation, retransmit, and reliability.</li> </ul> </li> <li>Modes: half-duplex (tx or rx) and duplex (simultaneous). <ul> <li>Pass windows limit when uplinks or downlinks are possible.</li> <li>Both physical and logistical reasons exist for limited windows such as being in view of the spacecraft or having the funds to schedule multiple passes.</li> </ul> </li> </ul>"},{"location":"manual/core-concepts/space-systems/#two-halves-of-a-spacecraft-bus-and-payload","title":"Two Halves of a Spacecraft: Bus and Payload","text":"<p>Every spacecraft can be split into two main parts:</p> <ul> <li>The Spacecraft Bus: <ul> <li>This is the \"life support\" of the spacecraft. </li> <li>It's the collection of all the core subsystems that are required for the spacecraft to function, regardless of its specific mission. </li> <li>Think of it as the chassis, engine, and computer of a car.</li> </ul> </li> <li>The Payload: <ul> <li>This is the \"mission equipment.\" </li> <li>It's the reason the spacecraft was launched in the first place. <ul> <li>For a science mission, it might be a telescope. </li> <li>For a communications mission, it's a powerful antenna.</li> </ul> </li> </ul> </li> </ul> <p>In TrySpace Lab, you will write the software that commands and controls both the bus and the payload where the payload is the \"demo\" component.</p>"},{"location":"manual/core-concepts/space-systems/#the-spacecraft-bus","title":"The Spacecraft Bus","text":"<p>The bus is a \"system of systems.\" Here are the essential subsystems you'll interact with as a developer.</p> <ul> <li>Command &amp; Data Handling (C&amp;DH)<ul> <li>The flight computer or on-board computer (OBC).</li> </ul> </li> <li>Electrical Power System (EPS)<ul> <li>The powerhouse of the cell spacecraft.</li> <li>Typically contains batteries, power switches, and solar arrays.</li> </ul> </li> <li>Telecommunication (COMMS)<ul> <li>The radios and antennas.</li> </ul> </li> <li>Attitude Determination and Control System (ADCS)<ul> <li>Assumed to be an \"ADCS In a Box\" in TrySpace Lab.</li> <li>Made up of various sensors, sense the environment, and actuators, impact the environment.</li> <li>Enables the vehicle to point at various objects and manipulate itself.</li> </ul> </li> <li>Thermal Control System (TCS)<ul> <li>Assumed to be passive in TrySpace Lab.</li> <li>If active heaters, coolers, and thermistors to read the temperature to act would exist.</li> </ul> </li> </ul> <p>Last updated: 20250910</p>"},{"location":"manual/handbook/faq/","title":"Troubleshooting &amp; FAQ","text":"<p>Short troubleshooting checklist and common issues.</p>"},{"location":"manual/handbook/faq/#checklist","title":"Checklist","text":"<ul> <li>Are containers running? <code>docker ps</code></li> <li>Are logs showing errors? <code>docker compose -f ./cfg/lab-compose.yaml logs --tail 200</code></li> <li>Are ports free? <code>ss -ltnp | grep 8090</code></li> <li>Are volumes filling up? <code>docker system df --volumes</code></li> </ul>"},{"location":"manual/handbook/faq/#common-issues","title":"Common issues","text":"<ul> <li>Data keeps growing across runs</li> <li> <p>Reason: Named Docker volumes persist. To reset, run <code>docker compose -f ./cfg/lab-compose.yaml down --volumes</code>.</p> </li> <li> <p>Port conflicts (e.g., 8090)</p> </li> <li> <p>Fix: Stop the conflicting service or modify <code>cfg/lab-compose.yaml</code> to use a different host port.</p> </li> <li> <p>Container crashes on startup</p> </li> <li>Inspect logs and raise an issue with the output if you need help. Useful commands:</li> </ul> <pre><code># show recent logs for a service\ndocker compose -f ./cfg/lab-compose.yaml logs --tail 200 tryspace-server\n# inspect container exit code\ndocker inspect --format='{{.State.ExitCode}}' tryspace-server\n# copy files from container\n docker cp tryspace-fsw:/tmp/radio_sim_cf_9.bin .\n</code></pre>"},{"location":"manual/handbook/faq/#when-to-open-an-issue","title":"When to open an issue","text":"<ul> <li>Reproducible crashes with logs and steps to reproduce</li> <li>Misbehavior in orchestrator merges (include <code>cfg/build.yaml</code> snapshot)</li> <li>Unexpected data corruption in persistent volumes</li> </ul>"},{"location":"manual/handbook/faq/#reporting-checklist-for-issues","title":"Reporting checklist for issues","text":"<ul> <li><code>git rev-parse --abbrev-ref HEAD</code> (branch)</li> <li><code>git rev-parse --short HEAD</code> (commit)</li> <li><code>docker compose -f ./cfg/lab-compose.yaml ps</code> output</li> <li>Relevant logs (attach <code>docker compose -f ./cfg/lab-compose.yaml logs --tail 500</code>)</li> <li><code>cfg/build.yaml</code> (after running orchestrator)</li> <li><code>cfg/active.yaml</code></li> </ul>"},{"location":"manual/handbook/getting-started/","title":"Getting Started with TrySpace Lab","text":"<p>A short quick-start to get a up and running with TrySpace Lab.</p>"},{"location":"manual/handbook/getting-started/#walkthrough","title":"Walkthrough","text":"<p>Note that the speed at which you can install is subject to your internet connection and the performance of your computer. Gigabytes of data are required to be downloaded during this process.</p> <ul> <li>Ensure Docker, Docker Compose (v2+), Git, and Make are installed (see Installation).</li> <li>Clone the repository to your computer: <pre><code>git clone https://github.com/TrySpaceOrg/tryspace-lab.git\ncd tryspace-lab\n</code></pre></li> </ul> <p></p> <ul> <li>Download and initialize the submodules: <code>git submodule update --init --recursive</code></li> </ul> <p></p> <ul> <li>Prepare environment and build: <code>make</code></li> </ul> <p></p> <ul> <li>Start the lab: <code>make start</code></li> </ul> <p></p> <p>The various services will take a few seconds to stabilize and flight software to finish it's initialization.</p> <p></p> <ul> <li>Access GSW (YAMCS): http://localhost:8090</li> </ul> <p></p> <ul> <li>You'll be able to send commands, view the current links, etc. in YAMCS so poke around!</li> </ul> <p></p> <ul> <li>Attach to consoles in a new tab: <code>docker attach tryspace-server</code></li> </ul> <p></p> <ul> <li>Stop (preserves data): CTRL+C in primary console</li> </ul> <p></p> <ul> <li>If you did CTRL+C twice to stop quickly, you may need to <code>make stop</code> prior to running again.</li> </ul> <p></p> <ul> <li>Clean (removes data): <code>make clean</code></li> </ul> <p></p> <ul> <li>Looking to reclaim some data? <code>make clean-cache</code></li> </ul> <p></p> <ul> <li>Want to uninstall? <code>make uninstall</code></li> </ul> <p></p> <p>Have trouble with any of the above? Checkout the Frequently Asked Questions.</p>"},{"location":"manual/handbook/installation/","title":"Installation","text":"<p>This page lists prerequisites and OS-specific tips for installing TrySpace Lab dependencies.</p>"},{"location":"manual/handbook/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker Engine</li> <li>Docker Compose v2 (CLI plugin) or newer</li> <li>Make</li> <li>Git</li> </ul>"},{"location":"manual/handbook/installation/#windows-notes","title":"Windows notes","text":"<p>For optimal performance on Windows we'd recommend WSL2 and Docker Engine installed. You can simply follow your specific Linux OS install for docker and docker compose for WSL2.</p> <p>If you prefer to work in a Virtual Machine, ensure you have Hyper-V disabled for VirtualBox (to avoid the green turtle) by using the official Windows DG Readiness Tool which completely disables Hyper-V and enables the other settings required.</p>"},{"location":"manual/handbook/installation/#linux-wsl-notes","title":"Linux / WSL notes","text":"<p>Be sure to add your user to the <code>docker</code> group!</p>"},{"location":"manual/handbook/installation/#verifying-installation","title":"Verifying installation","text":"<pre><code>docker --version\ndocker compose version\nmake --version\ngit --version\n</code></pre>"},{"location":"manual/how-to/component-mold/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/how-to/configuration/","title":"Configuration","text":"<p>This page documents the orchestrator and configuration files used by TrySpace Lab.</p>"},{"location":"manual/how-to/configuration/#primary-config-files-in-cfg","title":"Primary config files (in <code>cfg/</code>)","text":"<ul> <li><code>tryspace-config.yaml</code> - global configuration that lists available missions and global defaults.</li> <li>Mission config files - referenced from <code>tryspace-config.yaml</code> (each mission entry contains a <code>config_file</code> and <code>scenarios</code>).</li> <li>Scenario config files - referenced from a mission config and provide scenario-specific settings and optional <code>overrides</code>.</li> <li><code>active.yaml</code> - the current selection of <code>mission</code> and <code>scenario</code> (created automatically with defaults if missing).</li> <li><code>build.yaml</code> - a merged, human-readable snapshot written by the orchestrator for inspection.</li> </ul>"},{"location":"manual/how-to/configuration/#orchestrator-cfgtryspace-orchestratorpy","title":"Orchestrator (<code>cfg/tryspace-orchestrator.py</code>)","text":"<ul> <li>Loads <code>active.yaml</code>, <code>tryspace-config.yaml</code>, the selected mission, and the selected scenario.</li> <li>If <code>active.yaml</code> does not exist, it will create one using the first mission and scenario found in <code>tryspace-config.yaml</code> / mission config.</li> <li>Merges configuration layers and writes the merged result to <code>cfg/build.yaml</code>.</li> <li>For each component listed under the mission's <code>components</code> key the orchestrator performs a cascading merge and attempts to render component templates.</li> </ul>"},{"location":"manual/how-to/configuration/#mergeoverride-precedence-applied-in-this-order-later-items-win","title":"Merge/override precedence (applied in this order, later items win)","text":"<ul> <li>Fallback component defaults: <code>comp/&lt;component&gt;/support/device_config.yaml</code> (if present)</li> <li>Global config (<code>tryspace-config.yaml</code>) for the component</li> <li>Mission-level config for the component</li> <li>Scenario-level config for the component</li> <li>Scenario-level <code>overrides</code> (flat dict applied last)</li> </ul>"},{"location":"manual/how-to/configuration/#template-rendering","title":"Template rendering","text":"<ul> <li>The orchestrator looks for a Jinja2 template at <code>comp/&lt;component&gt;/support/device_config.j2</code></li> <li>If a template and merged config exist, it renders the template with <code>config</code> and writes the output to <code>comp/&lt;component&gt;/shared/device_cfg.h</code> (creates directories as needed)</li> </ul>"},{"location":"manual/how-to/configuration/#running-the-orchestrator","title":"Running the orchestrator","text":"<p>Run via make:</p> <pre><code>make cfg\n</code></pre> <p>Also can run directly:</p> <pre><code>python3 cfg/tryspace-orchestrator.py\n</code></pre>"},{"location":"manual/how-to/configuration/#changing-the-active-missionscenario","title":"Changing the active mission/scenario","text":"<p>Edit <code>cfg/active.yaml</code> and set the desired <code>mission</code> and <code>scenario</code>, then run the orchestrator to regenerate <code>cfg/build.yaml</code> and component configs.</p> <p>Example <code>cfg/active.yaml</code>:</p> <pre><code>mission: drm\nscenario: nominal\n</code></pre>"},{"location":"manual/how-to/configuration/#notes-tips","title":"Notes &amp; tips","text":"<ul> <li>Inspect <code>cfg/build.yaml</code> after a run to verify the merged configuration</li> <li>Component templates expect a flattened config in the <code>config</code> context \u2014 place component-specific keys under the component's top-level key in global/mission/scenario files</li> </ul>"},{"location":"manual/how-to/demo-component/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/how-to/docker/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/technical-reference/building/","title":"Building","text":"<p>Standard operations and common commands for running TrySpace Lab.</p>"},{"location":"manual/technical-reference/building/#starting-the-lab","title":"Starting the lab","text":"<p>Foreground (useful for development and observing operations):</p> <pre><code>make start\n</code></pre>"},{"location":"manual/technical-reference/building/#attaching-and-logs","title":"Attaching and logs","text":"<p>Attach to a running container:</p> <pre><code>docker attach tryspace-server\n</code></pre> <p>Follow logs for all services:</p> <pre><code>docker compose -f ./cfg/lab-compose.yaml logs -f\n</code></pre> <p>Follow logs for a single service:</p> <pre><code>docker compose -f ./cfg/lab-compose.yaml logs -f tryspace-server\n</code></pre>"},{"location":"manual/technical-reference/building/#services-breakdown","title":"Services breakdown","text":""},{"location":"manual/technical-reference/building/#tryspace-server","title":"tryspace-server","text":"<ul> <li>Purpose: Core server process and controls the time synronization provided by Simulith across the environment</li> <li>Typical use: pause/play or change simulation speed</li> <li>Common commands:</li> </ul> <pre><code>docker attach tryspace-server\ndocker compose -f ./cfg/lab-compose.yaml logs -f tryspace-server\n</code></pre>"},{"location":"manual/technical-reference/building/#tryspace-director","title":"tryspace-director","text":"<ul> <li>Purpose: Loads component simulators and 42 libraries in time step with environment via Simulith</li> <li>Typical use: inspect logs to verify component interfacing with flight software</li> <li>Common commands:</li> </ul> <pre><code>docker attach tryspace-director\ndocker compose -f ./cfg/lab-compose.yaml logs -f tryspace-director\n</code></pre>"},{"location":"manual/technical-reference/building/#tryspace-fsw","title":"tryspace-fsw","text":"<ul> <li>Purpose: Flight Software (FSW) container that runs the core Flight System software with component applications.</li> <li>Typical use: check FSW startup, telemetry output, and interactions</li> <li>Common commands:</li> </ul> <pre><code>docker attach tryspace-fsw\ndocker compose -f ./cfg/lab-compose.yaml logs -f tryspace-fsw\n</code></pre>"},{"location":"manual/technical-reference/building/#tryspace-gsw","title":"tryspace-gsw","text":"<ul> <li>Purpose: Ground Software (GSW) container running YAMCS (ground station interface and telemetry archive).</li> <li>Typical use: open the web UI, examine telemetry, and export or inspect persistent data.</li> <li>Ports: 8090 -&gt; 8090 (host) for the YAMCS web UI (confirm in <code>cfg/lab-compose.yaml</code>).</li> <li>Volumes:</li> <li><code>gsw-data</code> \u2014 persistent YAMCS data (preserved across <code>docker compose down</code> unless <code>--volumes</code> is used).</li> <li>Healthcheck: Compose defines an HTTP healthcheck against <code>http://localhost:8090</code> (see <code>cfg/lab-compose.yaml</code>).</li> <li>Common commands:</li> </ul> <pre><code># Open UI in a browser\nfirefox http://localhost:8090\n\ndocker compose -f ./cfg/lab-compose.yaml logs -f tryspace-gsw\n# Inspect persistent data\ndocker volume inspect gsw-data\n# View latest logs\ndocker logs --tail 200 tryspace-gsw\n</code></pre>"},{"location":"manual/technical-reference/building/#stopping","title":"Stopping","text":"<p>Stop containers and remove networks (preserves volumes):</p> <pre><code>make stop\n</code></pre> <p>Stop and remove containers, network, and named volumes (clean state):</p> <pre><code>make clean\n</code></pre>"},{"location":"manual/technical-reference/building/#uninstalling","title":"Uninstalling","text":"<p>To uninstall all pieces of the tryspace environment:</p> <pre><code>make uninstall\n</code></pre>"},{"location":"manual/technical-reference/cleanup/","title":"Data and Cleanup","text":"<p>Details about persistent data, named volumes, and safe cleanup.</p>"},{"location":"manual/technical-reference/cleanup/#named-volumes-used","title":"Named volumes used","text":"<ul> <li><code>gsw-data</code> - stores GSW/YAMCS persistent data (intended to survive restarts for post-processing).</li> <li><code>simulith_ipc</code> - used for inter-process IPC between simulith components.</li> </ul> <p>List volumes:</p> <pre><code>docker volume ls\n</code></pre> <p>Inspect a volume's mountpoints:</p> <pre><code>docker volume inspect gsw-data\n</code></pre>"},{"location":"manual/technical-reference/cleanup/#common-cleanup-commands","title":"Common cleanup commands","text":"<ul> <li>Stop containers and keep volumes (safe default):</li> </ul> <pre><code>make stop\n</code></pre> <ul> <li>Clean built files, volumes, and networks:</li> </ul> <pre><code>make clean\n</code></pre>"},{"location":"manual/technical-reference/cleanup/#safety-notes","title":"Safety notes","text":"<ul> <li><code>make clean</code> is destructive</li> <li>Confirm backups or exports before running <code>down --volumes</code> on production or long-running datasets</li> </ul>"},{"location":"manual/technical-reference/compilation/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/technical-reference/debugging/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/technical-reference/testing/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"manual/technical-reference/time/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"scenarios/commissioning/","title":"Commissioning","text":""},{"location":"scenarios/commissioning/#objective","title":"Objective","text":"<p>In this scenario, you will perform the initial \"on-orbit\" checkout of the Design Reference Mission (DRM) spacecraft. As the flight controller, your job is to make first contact, verify the health and status of the spacecraft's core systems, and transition it from its post-launch \"safe mode\" into a fully operational state, ready for nominal operations.</p>"},{"location":"scenarios/commissioning/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, please ensure you have:</p> <ul> <li>Successfully completed Getting Started.</li> <li>The TrySpace Lab environment is installed and able to run.</li> <li>Read the DRM Concept of Operations to understand the goals of the spacecraft you'll be controlling.</li> <li>Reviewed the System Architecture page to understand how the components interact.</li> </ul>"},{"location":"scenarios/commissioning/#overview","title":"Overview","text":"<p>The DRM spacecraft has just been deployed from its launch vehicle. It is currently in a power-saving and stable \"safe mode\". In this state, only essential components (C&amp;DH and radio) are active, and it is saving basic health telemetry while awaiting its first commands from the ground. Your task is to walk through the commissioning checklist to bring it to full functionality.</p> <p>We will follow these phases:</p> <ul> <li>Startup: launch tryspace-lab and verifying execution.</li> <li>First contact: establish the space link to the vehicle.</li> <li>Health assessment: verify the spacecraft is healthy.</li> <li>Subsystem checkout: power on and configure the core subsystems.</li> <li>Downlink data: inspect onboard files and download.</li> </ul>"},{"location":"scenarios/commissioning/#startup","title":"Startup","text":"<p>Launch TrySpace Lab:</p> <ul> <li>Open a terminal</li> <li>Navigate to your tryspace-lab repository - <code>cd tryspace-lab</code></li> <li>Build - <code>make</code></li> <li>Launch - <code>make start</code></li> </ul> <p></p> <p>Open the YAMCS ground software: localhost:8090</p> <p></p> <p>Verify everything is running - Confirm time is incrementing in the primary terminal window. You'll want to make sure the startup RTSs have completed prior to sending commands anytime you run. This includes RTS5 which ensures the radio is enabled and properly configured to receive ground commands.</p> <p></p> <p>Verify everything is running - Ensure data is flowing through the YAMCS debug interface.</p> <p></p> <p>You can run <code>docker stats</code> in another terminal to view the running containers and the resources they're using.</p> <p></p>"},{"location":"scenarios/commissioning/#first-contact","title":"First Contact","text":"<p>Command relative time sequence (RTS) 6 \"Start Pass\" - <code>/CFS/CMD/SC_START_RTS with RTSID 6</code>. Note you can use the search bar to find commands and telemetry quickly.</p> <p></p> <p></p> <p>This enables the radio for 8 minutes simulating a long pass if the space vehicle was in a Low Earth Orbit (LEO). You should see FSW print receipt of the command.</p> <p></p> <p>The radio-in link should also be receiving data in YAMCS.</p> <p></p> <p>You've now successfully commanded and are receiving telemetry from your DRM spacecraft! Note that as this pass completes you will stop receiving telemetry from the radio and see the <code>RTS 006 Execution Completed</code> message from FSW. The telemetry from the debug interface will continue to flow after this so even if you take longer than the pass period you can complete this exercise.</p>"},{"location":"scenarios/commissioning/#health-assessment","title":"Health Assessment","text":"<p>Test the command link with a <code>/cFS/CMD/CFS_ES_NOOP</code>, the \"hello world\" of the cFS Flight Software.</p> <p></p> <p>Ensure the command counter incremented. - <code>CFS/CFE_ES_HKPACKET</code>. As another NOOP is sent by the current spacecraft RTS, it should read as 2.</p> <p></p>"},{"location":"scenarios/commissioning/#subsystem-checkout","title":"Subsystem Checkout","text":""},{"location":"scenarios/commissioning/#adcs","title":"ADCS","text":"<p>Initialize ADCS and confirm health - <code>Procedures / Stacks / AdcsComponent.ysc</code> * Enables ADCS application. * Confirms commanding by resetting counters and then sending a no operation (NOOP) command and confirming count increments. * Displays current parameters. * Sets mode to SUNSAFE. * Verifies successful sun pointing (X+ pointed at the sun or nearly a value of +1.0) over 60 seconds.</p> <p>Select first step then clock the <code>Run all from selected step</code> button.</p> <p></p> <p>Confirm successful execution. This may take a little bit for the spacecraft to rotate and then stabilize within the desired margins.</p> <p></p> <p></p>"},{"location":"scenarios/commissioning/#demo-instrument","title":"Demo Instrument","text":"<p>Initialize demonstration instrument and confirm health - <code>Procedures / Stacks / DemoComponent.ysc</code> * Enables DEMO application. * Confirms commanding by resetting counters and then doing an application NOOP. * Verifies command count increments.</p> <p>Select first step then clock the <code>Run all from selected step</code> button.</p> <p></p> <p>Confirm successful execution.</p> <p></p> <p></p> <p>Now let's manually set the device configuration - <code>Commanding / Send a command / DEMO / DEMO_CONFIG_CC with DEVICE_CONFIG 10</code></p> <p></p> <p>You may a new tab for viewing the configuration parameter and leave another for commanding if you'd like. Note you may have to wait for the parameter to update in telemetry (~10 seconds).</p> <p></p>"},{"location":"scenarios/commissioning/#download-data","title":"Download Data","text":"<p>Let's stop RTS6 \"start pass\" and control the radio directly - <code>/CFS/CMD/SC_STOP_RTS with RTSID 6</code></p> <p></p> <p>Manually set the radio mode to DUPLEX so that we can send and receive data without the time constraint of RTS6 - <code>/RADIO/RADIO_CONFIG_CC with MODE 3 (DUPLEX)</code>. The radio will need to be in DUPLEX mode (both transmit and receive) in order to do reliable or Class 2 file transfers.</p> <p></p> <p></p> <p>Close the current file set that the Data Storage (DS) application is using so we can download it - <code>/CFS/CMD/DS_CLOSE_ALL</code></p> <p></p> <p>Check what data exists on the space vehicle using the File Manager (FM) application in cFS - <code>/CFS/CMD/FM_GET_DIR_PKT with DIRECTORY /d</code></p> <p></p> <p>Wait for this data to be collected and sent to the ground in the <code>/CFS/FM_DIRLIST_PKT</code></p> <p></p> <p>Copy the FILENAME2 you receive, for example - <code>sv1980012091706.ds</code>, as it's older (lower time stamp in filename). Use the CCSDS File Delivery Protocol (CFDP) application to download the file older - <code>/CFS/CMD/CF_TX_FILE with SRCFILENAME /d/sv1980012091706.ds and DSTFILENAME sv1980012091706.ds</code></p> <p></p> <p>Watch the file downlink and confirm it's receipt - <code>File transfer</code>.</p> <p></p> <p>Ignore the other files in the above screenshot as they were from prior testing.</p>"},{"location":"scenarios/commissioning/#review","title":"Review","text":"<p>Congratulations! Commissioning of the DRM spacecraft is complete.</p> <p>You have:</p> <ul> <li>Established a stable command and telemetry link.</li> <li>Verified the health of the spacecraft's core systems.</li> <li>Powered on and configured the ACS and primary payload.</li> <li>Transitioned the vehicle from a post-launch safe state to being fully mission-ready.</li> </ul> <p>Next steps include performing day-to-day nominal operations.</p> <p>Last updated: 20250915</p>"},{"location":"scenarios/fdir/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"scenarios/nominal-operations/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"},{"location":"scenarios/overview/","title":"Scenarios","text":"<p>The various scenarios are designed to mimic those one may see while operating a space vehicle:</p> <ul> <li>Commissioning</li> <li>Nominal Operations</li> <li>Fault Detection, Isolation, and Recovery</li> <li>Security</li> </ul> <p>Each of these scenarios contains an objective, prerequisites, and and overview before getting started. If you have questions please feel free to open a GitHub Discussion. If you find any bugs or issues you may open a GitHub Issue.</p> <p>We're happy to help you TrySpace!</p>"},{"location":"scenarios/security-incident-response/","title":"Under Construction","text":"<p>Building for space is hard, so is documentation. Check back soon!</p>"}]}